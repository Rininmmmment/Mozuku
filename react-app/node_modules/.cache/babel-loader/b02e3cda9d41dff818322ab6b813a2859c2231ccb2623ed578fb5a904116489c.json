{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/WebcamCapture.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n\n// function WebcamCapture() {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n//   const [result, setResult] = useState<string>('');\n\n//   useEffect(() => {\n//     const startWebcam = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (error) {\n//         console.error('Error accessing webcam:', error);\n//       }\n//     };\n\n//     startWebcam();\n//   }, []);\n\n//   const captureVideoFrame = async () => {\n//     const canvas = canvasRef.current;\n//     const video = videoRef.current;\n\n//     if (canvas && video) {\n//       const ctx = canvas.getContext('2d');\n//       if (ctx) {\n//         ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//         // Canvasから画像データを取得\n//         const imageDataURL = canvas.toDataURL('image/jpeg');\n\n//         // 画像データを送信\n//         const response = await fetch('http://localhost:8000/face-detection', {\n//           method: 'POST',\n//           body: JSON.stringify({ image: imageDataURL }),\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           if (data.result === 'Yes') {\n//             setResult('会いに来てくれたんだね！嬉しいにゃ〜');\n//           } else {\n//             setResult('遊んでくれなくて悲しいにゃ...');\n//           }\n//         } else {\n//           console.error('Error sending image for analysis');\n//         }\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     // 10秒ごとにcaptureVideoFrameを呼び出すタイマーを設定\n//     const timer = setInterval(captureVideoFrame, 10000);\n\n//     // コンポーネントがアンマウントされたときにタイマーをクリア\n//     return () => {\n//       clearInterval(timer);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <button onClick={captureVideoFrame}>Capture and Analyze</button>\n//       <video style={{ display: 'none' }} ref={videoRef} autoPlay />\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <p>もずく: {result}</p>\n//     </div>\n//   );\n// }\n\n// export default WebcamCapture;\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThreeDObject() {\n  _s();\n  const canvasRef = useRef(null);\n  const videoRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      canvas\n    });\n\n    // 条件付き型を使用して VideoTexture を作成\n    const videoTexture = videoRef.current ? new THREE.VideoTexture(videoRef.current) : new THREE.Texture();\n    videoTexture.minFilter = THREE.LinearFilter;\n    videoTexture.magFilter = THREE.LinearFilter;\n    const material = new THREE.MeshBasicMaterial({\n      map: videoTexture\n    });\n    const geometry = new THREE.BoxGeometry();\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      muted: true,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'block',\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(ThreeDObject, \"yDZRt0qVdA+8KL1NIY7I2UpyRts=\");\n_c = ThreeDObject;\nexport default ThreeDObject;\nvar _c;\n$RefreshReg$(_c, \"ThreeDObject\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","ThreeDObject","_s","canvasRef","videoRef","canvas","current","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","videoTexture","VideoTexture","Texture","minFilter","LinearFilter","magFilter","material","MeshBasicMaterial","map","geometry","BoxGeometry","cube","Mesh","add","animate","requestAnimationFrame","render","children","ref","autoPlay","playsInline","muted","style","display","fileName","_jsxFileName","lineNumber","columnNumber","width","_c","$RefreshReg$"],"sources":["/usr/src/app/src/WebcamCapture.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n\n// function WebcamCapture() {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n//   const [result, setResult] = useState<string>('');\n\n//   useEffect(() => {\n//     const startWebcam = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (error) {\n//         console.error('Error accessing webcam:', error);\n//       }\n//     };\n\n//     startWebcam();\n//   }, []);\n\n//   const captureVideoFrame = async () => {\n//     const canvas = canvasRef.current;\n//     const video = videoRef.current;\n\n//     if (canvas && video) {\n//       const ctx = canvas.getContext('2d');\n//       if (ctx) {\n//         ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//         // Canvasから画像データを取得\n//         const imageDataURL = canvas.toDataURL('image/jpeg');\n\n//         // 画像データを送信\n//         const response = await fetch('http://localhost:8000/face-detection', {\n//           method: 'POST',\n//           body: JSON.stringify({ image: imageDataURL }),\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           if (data.result === 'Yes') {\n//             setResult('会いに来てくれたんだね！嬉しいにゃ〜');\n//           } else {\n//             setResult('遊んでくれなくて悲しいにゃ...');\n//           }\n//         } else {\n//           console.error('Error sending image for analysis');\n//         }\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     // 10秒ごとにcaptureVideoFrameを呼び出すタイマーを設定\n//     const timer = setInterval(captureVideoFrame, 10000);\n\n//     // コンポーネントがアンマウントされたときにタイマーをクリア\n//     return () => {\n//       clearInterval(timer);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <button onClick={captureVideoFrame}>Capture and Analyze</button>\n//       <video style={{ display: 'none' }} ref={videoRef} autoPlay />\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <p>もずく: {result}</p>\n//     </div>\n//   );\n// }\n\n// export default WebcamCapture;\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nfunction ThreeDObject() {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n\n    // 条件付き型を使用して VideoTexture を作成\n    const videoTexture = videoRef.current\n      ? new THREE.VideoTexture(videoRef.current)\n      : new THREE.Texture();\n\n    videoTexture.minFilter = THREE.LinearFilter;\n    videoTexture.magFilter = THREE.LinearFilter;\n\n    const material = new THREE.MeshBasicMaterial({ map: videoTexture });\n    const geometry = new THREE.BoxGeometry();\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }, []);\n\n  return (\n    <div>\n      <video ref={videoRef} autoPlay playsInline muted style={{ display: 'none' }} />\n      <canvas ref={canvasRef} style={{ display: 'block', width: '100%' }} />\n    </div>\n  );\n}\n\nexport default ThreeDObject;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
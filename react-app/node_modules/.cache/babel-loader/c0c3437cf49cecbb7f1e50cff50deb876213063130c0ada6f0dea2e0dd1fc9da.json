{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/WebcamCapture.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport ThreeDObject from './ThreeDObject'; // ファイルのパスを指定\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WebcamCapture() {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [result, setResult] = useState(null); // 数値型に変更\n\n  useEffect(() => {\n    const startWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (error) {\n        console.error('Error accessing webcam:', error);\n      }\n    };\n    startWebcam();\n  }, []);\n  const captureVideoFrame = async () => {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    if (canvas && video) {\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n        // Canvasから画像データを取得\n        const imageDataURL = canvas.toDataURL('image/jpeg');\n\n        // 画像データを送信\n        const response = await fetch('http://localhost:8000/face-detection', {\n          method: 'POST',\n          body: JSON.stringify({\n            image: imageDataURL\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          if (data.result === 'Yes') {\n            setResult(1); // 顔が認識されたら1を設定\n          } else {\n            setResult(2); // 顔が認識されなければ2を設定\n          }\n        } else {\n          console.error('Error sending image for analysis');\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    // 10秒ごとにcaptureVideoFrameを呼び出すタイマーを設定\n    const timer = setInterval(captureVideoFrame, 10000);\n\n    // コンポーネントがアンマウントされたときにタイマーをクリア\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: captureVideoFrame,\n      children: \"Capture and Analyze\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      style: {\n        display: 'none'\n      },\n      ref: videoRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u3082\\u305A\\u304F: \", result === 1 ? '顔が認識されました' : result === 2 ? '顔が認識されませんでした' : '解析中...']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ThreeDObject, {\n      color: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(WebcamCapture, \"xSgbfy1++V/obLrlkhJulAcJ9YY=\");\n_c = WebcamCapture;\nexport default WebcamCapture;\nvar _c;\n$RefreshReg$(_c, \"WebcamCapture\");","map":{"version":3,"names":["React","useEffect","useRef","useState","ThreeDObject","jsxDEV","_jsxDEV","WebcamCapture","_s","videoRef","canvasRef","result","setResult","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","error","console","captureVideoFrame","canvas","ctx","getContext","drawImage","width","height","imageDataURL","toDataURL","response","fetch","method","body","JSON","stringify","image","headers","ok","data","json","timer","setInterval","clearInterval","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","display","ref","autoPlay","color","_c","$RefreshReg$"],"sources":["/usr/src/app/src/WebcamCapture.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport ThreeDObject from './ThreeDObject'; // ファイルのパスを指定\n\nfunction WebcamCapture() {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [result, setResult] = useState<number | null>(null); // 数値型に変更\n\n  useEffect(() => {\n    const startWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (error) {\n        console.error('Error accessing webcam:', error);\n      }\n    };\n\n    startWebcam();\n  }, []);\n\n  const captureVideoFrame = async () => {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n\n    if (canvas && video) {\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n        // Canvasから画像データを取得\n        const imageDataURL = canvas.toDataURL('image/jpeg');\n\n        // 画像データを送信\n        const response = await fetch('http://localhost:8000/face-detection', {\n          method: 'POST',\n          body: JSON.stringify({ image: imageDataURL }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          if (data.result === 'Yes') {\n            setResult(1); // 顔が認識されたら1を設定\n          } else {\n            setResult(2); // 顔が認識されなければ2を設定\n          }\n        } else {\n          console.error('Error sending image for analysis');\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    // 10秒ごとにcaptureVideoFrameを呼び出すタイマーを設定\n    const timer = setInterval(captureVideoFrame, 10000);\n\n    // コンポーネントがアンマウントされたときにタイマーをクリア\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div>\n      <button onClick={captureVideoFrame}>Capture and Analyze</button>\n      <video style={{ display: 'none' }} ref={videoRef} autoPlay />\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\n      <p>もずく: {result === 1 ? '顔が認識されました' : result === 2 ? '顔が認識されませんでした' : '解析中...'}</p>\n      <ThreeDObject color={result} />\n    </div>\n  );\n}\n\nexport default WebcamCapture;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
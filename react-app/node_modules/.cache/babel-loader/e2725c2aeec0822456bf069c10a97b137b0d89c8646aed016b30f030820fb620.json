{"ast":null,"code":"// import React, { useEffect, useRef, useState } from 'react';\n\n// function WebcamCapture() {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n//   const [result, setResult] = useState<string>('');\n\n//   useEffect(() => {\n//     const startWebcam = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (error) {\n//         console.error('Error accessing webcam:', error);\n//       }\n//     };\n\n//     startWebcam();\n//   }, []);\n\n//   const captureVideoFrame = async () => {\n//     const canvas = canvasRef.current;\n//     const video = videoRef.current;\n\n//     if (canvas && video) {\n//       const ctx = canvas.getContext('2d');\n//       if (ctx) {\n//         ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//         // Canvasから画像データを取得\n//         const imageDataURL = canvas.toDataURL('image/jpeg');\n\n//         // 画像データを送信\n//         const response = await fetch('http://localhost:8000/face-detection', {\n//           method: 'POST',\n//           body: JSON.stringify({ image: imageDataURL }),\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           if (data.result === 'Yes') {\n//             setResult('会いに来てくれたんだね！嬉しいにゃ〜');\n//           } else {\n//             setResult('遊んでくれなくて悲しいにゃ...');\n//           }\n//         } else {\n//           console.error('Error sending image for analysis');\n//         }\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     // 10秒ごとにcaptureVideoFrameを呼び出すタイマーを設定\n//     const timer = setInterval(captureVideoFrame, 10000);\n\n//     // コンポーネントがアンマウントされたときにタイマーをクリア\n//     return () => {\n//       clearInterval(timer);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <button onClick={captureVideoFrame}>Capture and Analyze</button>\n//       <video style={{ display: 'none' }} ref={videoRef} autoPlay />\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <p>もずく: {result}</p>\n//     </div>\n//   );\n// }\n\n// export default WebcamCapture;\n\n// import React, { useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n\n// function ThreeDObject() {\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     if (!canvas) return;\n\n//     // シーンの作成\n//     const scene = new THREE.Scene();\n\n//     // カメラの作成\n//     const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n//     camera.position.z = 5;\n\n//     // レンダラの作成\n//     const renderer = new THREE.WebGLRenderer({ canvas });\n\n//     // 立方体の作成\n//     const geometry = new THREE.BoxGeometry();\n//     const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n//     const cube = new THREE.Mesh(geometry, material);\n//     scene.add(cube);\n\n//     // アニメーションの設定\n//     const animate = () => {\n//       requestAnimationFrame(animate);\n\n//       // 立方体を回転させる\n//       cube.rotation.x += 0.01;\n//       cube.rotation.y += 0.01;\n\n//       // レンダリング\n//       renderer.render(scene, camera);\n//     };\n\n//     animate();\n//   }, []);\n\n//   return <canvas ref={canvasRef} style={{ display: 'block', width: '100%' }} />;\n// }\n\n// export default ThreeDObject;\n\nfunction init() {\n  const width = 960;\n  const height = 540;\n\n  // レンダラーを作成\n  const canvasElement = document.querySelector('#myCanvas');\n  const renderer = new THREE.WebGLRenderer({\n    antialias: true,\n    canvas: canvasElement\n  });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(width, height);\n\n  // シーンを作成\n  const scene = new THREE.Scene();\n\n  // カメラを作成\n  const camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000);\n  camera.position.set(0, 0, 600);\n\n  // カメラコントローラーを作成\n  const controls = new THREE.OrbitControls(camera, canvasElement);\n  controls.enableDamping = true;\n  controls.dampingFactor = 0.2;\n\n  // 環境光源を作成\n  const ambientLight = new THREE.AmbientLight(0xffffff);\n  ambientLight.intensity = 0.5;\n  scene.add(ambientLight);\n\n  // 平行光源を作成\n  const directionalLight = new THREE.DirectionalLight(0xffffff);\n  directionalLight.intensity = 1;\n  directionalLight.position.set(1, 3, 1);\n  scene.add(directionalLight);\n\n  // 3Dモデルの読み込み\n  const objLoader = new THREE.OBJLoader();\n  objLoader.load('Building.obj', function (obj) {\n    scene.add(obj);\n    obj.position.x = -50;\n    obj.position.y = -100;\n  });\n  tick();\n  function tick() {\n    renderer.render(scene, camera); // レンダリング\n    requestAnimationFrame(tick);\n  }\n}","map":{"version":3,"names":["init","width","height","canvasElement","document","querySelector","renderer","THREE","WebGLRenderer","antialias","canvas","setPixelRatio","window","devicePixelRatio","setSize","scene","Scene","camera","PerspectiveCamera","position","set","controls","OrbitControls","enableDamping","dampingFactor","ambientLight","AmbientLight","intensity","add","directionalLight","DirectionalLight","objLoader","OBJLoader","load","obj","x","y","tick","render","requestAnimationFrame"],"sources":["/usr/src/app/src/App.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n\n// function WebcamCapture() {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n//   const [result, setResult] = useState<string>('');\n\n//   useEffect(() => {\n//     const startWebcam = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (error) {\n//         console.error('Error accessing webcam:', error);\n//       }\n//     };\n\n//     startWebcam();\n//   }, []);\n\n//   const captureVideoFrame = async () => {\n//     const canvas = canvasRef.current;\n//     const video = videoRef.current;\n\n//     if (canvas && video) {\n//       const ctx = canvas.getContext('2d');\n//       if (ctx) {\n//         ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//         // Canvasから画像データを取得\n//         const imageDataURL = canvas.toDataURL('image/jpeg');\n\n//         // 画像データを送信\n//         const response = await fetch('http://localhost:8000/face-detection', {\n//           method: 'POST',\n//           body: JSON.stringify({ image: imageDataURL }),\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           if (data.result === 'Yes') {\n//             setResult('会いに来てくれたんだね！嬉しいにゃ〜');\n//           } else {\n//             setResult('遊んでくれなくて悲しいにゃ...');\n//           }\n//         } else {\n//           console.error('Error sending image for analysis');\n//         }\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     // 10秒ごとにcaptureVideoFrameを呼び出すタイマーを設定\n//     const timer = setInterval(captureVideoFrame, 10000);\n\n//     // コンポーネントがアンマウントされたときにタイマーをクリア\n//     return () => {\n//       clearInterval(timer);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <button onClick={captureVideoFrame}>Capture and Analyze</button>\n//       <video style={{ display: 'none' }} ref={videoRef} autoPlay />\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <p>もずく: {result}</p>\n//     </div>\n//   );\n// }\n\n// export default WebcamCapture;\n\n\n// import React, { useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n\n\n// function ThreeDObject() {\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     if (!canvas) return;\n\n//     // シーンの作成\n//     const scene = new THREE.Scene();\n\n//     // カメラの作成\n//     const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n//     camera.position.z = 5;\n\n//     // レンダラの作成\n//     const renderer = new THREE.WebGLRenderer({ canvas });\n\n//     // 立方体の作成\n//     const geometry = new THREE.BoxGeometry();\n//     const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n//     const cube = new THREE.Mesh(geometry, material);\n//     scene.add(cube);\n\n//     // アニメーションの設定\n//     const animate = () => {\n//       requestAnimationFrame(animate);\n\n//       // 立方体を回転させる\n//       cube.rotation.x += 0.01;\n//       cube.rotation.y += 0.01;\n\n//       // レンダリング\n//       renderer.render(scene, camera);\n//     };\n\n//     animate();\n//   }, []);\n\n//   return <canvas ref={canvasRef} style={{ display: 'block', width: '100%' }} />;\n// }\n\n// export default ThreeDObject;\n\nfunction init() {\n    const width = 960;\n    const height = 540;\n\n    // レンダラーを作成\n    const canvasElement = document.querySelector('#myCanvas');\n    const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        canvas: canvasElement,\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width, height);\n\n    // シーンを作成\n    const scene = new THREE.Scene();\n\n    // カメラを作成\n    const camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000);\n    camera.position.set(0, 0, 600);\n\n    // カメラコントローラーを作成\n    const controls = new THREE.OrbitControls(camera, canvasElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.2;\n\n    // 環境光源を作成\n    const ambientLight = new THREE.AmbientLight(0xffffff);\n    ambientLight.intensity = 0.5;\n    scene.add(ambientLight);\n\n    // 平行光源を作成\n    const directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.intensity = 1;\n    directionalLight.position.set(1, 3, 1);\n    scene.add(directionalLight);\n\n    // 3Dモデルの読み込み\n    const objLoader = new THREE.OBJLoader();\n    objLoader.load(\n        'Building.obj',\n        function (obj) {\n            scene.add(obj);\n            obj.position.x = -50;\n            obj.position.y = -100;\n        },\n    );\n\n    tick();\n\n    function tick() {\n        renderer.render(scene, camera); // レンダリング\n        requestAnimationFrame(tick);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
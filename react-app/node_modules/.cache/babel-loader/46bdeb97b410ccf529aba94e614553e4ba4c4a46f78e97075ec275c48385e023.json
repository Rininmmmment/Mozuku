{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/ThreeDObject.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThreeDObject({\n  color\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [cubeColor, setCubeColor] = useState(0x00ff00);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true\n    });\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({\n      color: cubeColor\n    }); // マテリアルの色をプロップスに基づいて設定\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, [cubeColor]); // cubeColorに変更があるときだけ再レンダリング\n\n  useEffect(() => {\n    // 引数colorに応じてcubeColorを設定\n    if (color === 1) {\n      setCubeColor(0x00ff00); // 緑\n    } else if (color === 2) {\n      setCubeColor(0xff00ff); // ピンク\n    }\n  }, [color]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: 'block',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n}\n_s(ThreeDObject, \"zqjWLFFSB3DQdFUIMvfr3Qo2NAc=\");\n_c = ThreeDObject;\nexport default ThreeDObject;\nvar _c;\n$RefreshReg$(_c, \"ThreeDObject\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","jsxDEV","_jsxDEV","ThreeDObject","color","_s","canvasRef","cubeColor","setCubeColor","canvas","current","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","antialias","geometry","BoxGeometry","material","MeshBasicMaterial","cube","Mesh","add","animate","requestAnimationFrame","rotation","x","y","render","ref","style","display","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/usr/src/app/src/ThreeDObject.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\n\nfunction ThreeDObject({ color }: { color: number }) {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [cubeColor, setCubeColor] = useState(0x00ff00);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\n\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: cubeColor }); // マテリアルの色をプロップスに基づいて設定\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }, [cubeColor]); // cubeColorに変更があるときだけ再レンダリング\n\n  useEffect(() => {\n    // 引数colorに応じてcubeColorを設定\n    if (color === 1) {\n      setCubeColor(0x00ff00); // 緑\n    } else if (color === 2) {\n      setCubeColor(0xff00ff); // ピンク\n    }\n  }, [color]);\n\n  return <canvas ref={canvasRef} style={{ display: 'block', width: '100%' }} />;\n}\n\nexport default ThreeDObject;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,YAAYA,CAAC;EAAEC;AAAyB,CAAC,EAAE;EAAAC,EAAA;EAClD,MAAMC,SAAS,GAAGR,MAAM,CAA2B,IAAI,CAAC;EACxD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,QAAQ,CAAC;EAEpDF,SAAS,CAAC,MAAM;IACd,MAAMY,MAAM,GAAGH,SAAS,CAACI,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,KAAK,GAAG,IAAIX,KAAK,CAACY,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIb,KAAK,CAACc,iBAAiB,CAAC,EAAE,EAAEL,MAAM,CAACM,WAAW,GAAGN,MAAM,CAACO,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC;IACnGH,MAAM,CAACI,QAAQ,CAACC,CAAC,GAAG,CAAC;IAErB,MAAMC,QAAQ,GAAG,IAAInB,KAAK,CAACoB,aAAa,CAAC;MAAEX,MAAM;MAAEY,SAAS,EAAE;IAAK,CAAC,CAAC;IAErE,MAAMC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,WAAW,CAAC,CAAC;IACxC,MAAMC,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,iBAAiB,CAAC;MAAErB,KAAK,EAAEG;IAAU,CAAC,CAAC,CAAC,CAAC;IACpE,MAAMmB,IAAI,GAAG,IAAI1B,KAAK,CAAC2B,IAAI,CAACL,QAAQ,EAAEE,QAAQ,CAAC;IAC/Cb,KAAK,CAACiB,GAAG,CAACF,IAAI,CAAC;IAEf,MAAMG,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BH,IAAI,CAACK,QAAQ,CAACC,CAAC,IAAI,IAAI;MACvBN,IAAI,CAACK,QAAQ,CAACE,CAAC,IAAI,IAAI;MACvBd,QAAQ,CAACe,MAAM,CAACvB,KAAK,EAAEE,MAAM,CAAC;IAChC,CAAC;IAEDgB,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAACtB,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjBV,SAAS,CAAC,MAAM;IACd;IACA,IAAIO,KAAK,KAAK,CAAC,EAAE;MACfI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM,IAAIJ,KAAK,KAAK,CAAC,EAAE;MACtBI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;EAEX,oBAAOF,OAAA;IAAQiC,GAAG,EAAE7B,SAAU;IAAC8B,KAAK,EAAE;MAAEC,OAAO,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC/E;AAACrC,EAAA,CAvCQF,YAAY;AAAAwC,EAAA,GAAZxC,YAAY;AAyCrB,eAAeA,YAAY;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
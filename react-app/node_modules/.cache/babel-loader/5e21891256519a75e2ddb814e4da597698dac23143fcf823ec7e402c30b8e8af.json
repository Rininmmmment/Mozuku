{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/App.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n\n// function WebcamCapture() {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n//   const [result, setResult] = useState<string>('');\n\n//   useEffect(() => {\n//     const startWebcam = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (error) {\n//         console.error('Error accessing webcam:', error);\n//       }\n//     };\n\n//     startWebcam();\n//   }, []);\n\n//   const captureVideoFrame = async () => {\n//     const canvas = canvasRef.current;\n//     const video = videoRef.current;\n\n//     if (canvas && video) {\n//       const ctx = canvas.getContext('2d');\n//       if (ctx) {\n//         ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//         // Canvasから画像データを取得\n//         const imageDataURL = canvas.toDataURL('image/jpeg');\n\n//         // 画像データを送信\n//         const response = await fetch('http://localhost:8000/face-detection', {\n//           method: 'POST',\n//           body: JSON.stringify({ image: imageDataURL }),\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           if (data.result === 'Yes') {\n//             setResult('会いに来てくれたんだね！嬉しいにゃ〜');\n//           } else {\n//             setResult('遊んでくれなくて悲しいにゃ...');\n//           }\n//         } else {\n//           console.error('Error sending image for analysis');\n//         }\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     // 10秒ごとにcaptureVideoFrameを呼び出すタイマーを設定\n//     const timer = setInterval(captureVideoFrame, 10000);\n\n//     // コンポーネントがアンマウントされたときにタイマーをクリア\n//     return () => {\n//       clearInterval(timer);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <button onClick={captureVideoFrame}>Capture and Analyze</button>\n//       <video style={{ display: 'none' }} ref={videoRef} autoPlay />\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <p>もずく: {result}</p>\n//     </div>\n//   );\n// }\n\n// export default WebcamCapture;\n// import React, { useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n\n// function ThreeDObject() {\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     if (!canvas) return;\n\n//     // シーンの作成\n//     const scene = new THREE.Scene();\n\n//     // カメラの作成\n//     const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n//     camera.position.z = 5;\n\n//     // レンダラの作成\n//     const renderer = new THREE.WebGLRenderer({ canvas });\n\n//     // 立方体の作成\n//     const geometry = new THREE.BoxGeometry();\n//     const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n//     const cube = new THREE.Mesh(geometry, material);\n//     scene.add(cube);\n\n//     // アニメーションの設定\n//     const animate = () => {\n//       requestAnimationFrame(animate);\n\n//       // 立方体を回転させる\n//       cube.rotation.x += 0.01;\n//       cube.rotation.y += 0.01;\n\n//       // レンダリング\n//       renderer.render(scene, camera);\n//     };\n\n//     animate();\n//   }, []);\n\n//   return <canvas ref={canvasRef} style={{ display: 'block' }} />;\n// }\n\n// export default ThreeDObject;\n\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader'; // OBJLoaderのインポート\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThreeDObject() {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n    const renderer = new THREE.WebGLRenderer({\n      canvas\n    });\n\n    // OBJLoaderのインスタンスを作成\n    const objLoader = new OBJLoader();\n\n    // モデルの読み込み\n    objLoader.load('model/your_model.obj', obj => {\n      // 読み込んだモデルをシーンに追加\n      scene.add(obj);\n    });\n\n    // アニメーションの設定\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // レンダリング\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: 'block'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 10\n  }, this);\n}\n_s(ThreeDObject, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ThreeDObject;\nexport default ThreeDObject;\nvar _c;\n$RefreshReg$(_c, \"ThreeDObject\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OBJLoader","jsxDEV","_jsxDEV","ThreeDObject","_s","canvasRef","canvas","current","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","objLoader","load","obj","add","animate","requestAnimationFrame","render","ref","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/usr/src/app/src/App.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n\n// function WebcamCapture() {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n//   const [result, setResult] = useState<string>('');\n\n//   useEffect(() => {\n//     const startWebcam = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (error) {\n//         console.error('Error accessing webcam:', error);\n//       }\n//     };\n\n//     startWebcam();\n//   }, []);\n\n//   const captureVideoFrame = async () => {\n//     const canvas = canvasRef.current;\n//     const video = videoRef.current;\n\n//     if (canvas && video) {\n//       const ctx = canvas.getContext('2d');\n//       if (ctx) {\n//         ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//         // Canvasから画像データを取得\n//         const imageDataURL = canvas.toDataURL('image/jpeg');\n\n//         // 画像データを送信\n//         const response = await fetch('http://localhost:8000/face-detection', {\n//           method: 'POST',\n//           body: JSON.stringify({ image: imageDataURL }),\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           if (data.result === 'Yes') {\n//             setResult('会いに来てくれたんだね！嬉しいにゃ〜');\n//           } else {\n//             setResult('遊んでくれなくて悲しいにゃ...');\n//           }\n//         } else {\n//           console.error('Error sending image for analysis');\n//         }\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     // 10秒ごとにcaptureVideoFrameを呼び出すタイマーを設定\n//     const timer = setInterval(captureVideoFrame, 10000);\n\n//     // コンポーネントがアンマウントされたときにタイマーをクリア\n//     return () => {\n//       clearInterval(timer);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <button onClick={captureVideoFrame}>Capture and Analyze</button>\n//       <video style={{ display: 'none' }} ref={videoRef} autoPlay />\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <p>もずく: {result}</p>\n//     </div>\n//   );\n// }\n\n// export default WebcamCapture;\n// import React, { useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n\n\n// function ThreeDObject() {\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n//   useEffect(() => {\n//     const canvas = canvasRef.current;\n//     if (!canvas) return;\n\n//     // シーンの作成\n//     const scene = new THREE.Scene();\n\n//     // カメラの作成\n//     const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n//     camera.position.z = 5;\n\n//     // レンダラの作成\n//     const renderer = new THREE.WebGLRenderer({ canvas });\n\n//     // 立方体の作成\n//     const geometry = new THREE.BoxGeometry();\n//     const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n//     const cube = new THREE.Mesh(geometry, material);\n//     scene.add(cube);\n\n//     // アニメーションの設定\n//     const animate = () => {\n//       requestAnimationFrame(animate);\n\n//       // 立方体を回転させる\n//       cube.rotation.x += 0.01;\n//       cube.rotation.y += 0.01;\n\n//       // レンダリング\n//       renderer.render(scene, camera);\n//     };\n\n//     animate();\n//   }, []);\n\n//   return <canvas ref={canvasRef} style={{ display: 'block' }} />;\n// }\n\n// export default ThreeDObject;\n\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader'; // OBJLoaderのインポート\n\nfunction ThreeDObject() {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n\n    // OBJLoaderのインスタンスを作成\n    const objLoader = new OBJLoader();\n\n    // モデルの読み込み\n    objLoader.load('model/your_model.obj', (obj) => {\n      // 読み込んだモデルをシーンに追加\n      scene.add(obj);\n    });\n\n    // アニメーションの設定\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // レンダリング\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }, []);\n\n  return <canvas ref={canvasRef} style={{ display: 'block' }} />;\n}\n\nexport default ThreeDObject;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,gCAAgC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAMC,SAAS,GAAGP,MAAM,CAA2B,IAAI,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,MAAMS,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,KAAK,GAAG,IAAIT,KAAK,CAACU,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIX,KAAK,CAACY,iBAAiB,CAAC,EAAE,EAAEL,MAAM,CAACM,WAAW,GAAGN,MAAM,CAACO,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC;IACnGH,MAAM,CAACI,QAAQ,CAACC,CAAC,GAAG,CAAC;IAErB,MAAMC,QAAQ,GAAG,IAAIjB,KAAK,CAACkB,aAAa,CAAC;MAAEX;IAAO,CAAC,CAAC;;IAEpD;IACA,MAAMY,SAAS,GAAG,IAAIlB,SAAS,CAAC,CAAC;;IAEjC;IACAkB,SAAS,CAACC,IAAI,CAAC,sBAAsB,EAAGC,GAAG,IAAK;MAC9C;MACAZ,KAAK,CAACa,GAAG,CAACD,GAAG,CAAC;IAChB,CAAC,CAAC;;IAEF;IACA,MAAME,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;;MAE9B;MACAN,QAAQ,CAACQ,MAAM,CAAChB,KAAK,EAAEE,MAAM,CAAC;IAChC,CAAC;IAEDY,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOpB,OAAA;IAAQuB,GAAG,EAAEpB,SAAU;IAACqB,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChE;AAAC3B,EAAA,CAlCQD,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAoCrB,eAAeA,YAAY;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
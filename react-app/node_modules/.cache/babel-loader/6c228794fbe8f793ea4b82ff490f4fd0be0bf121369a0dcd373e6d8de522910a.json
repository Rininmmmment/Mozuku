{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/ShachiObject.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThreeDModel() {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // シーンの作成\n    const scene = new THREE.Scene();\n\n    // カメラの作成\n    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n    camera.lookAt(0, 0, 0);\n\n    // レンダラの作成\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true\n    });\n\n    // 平行光源を作成\n    const directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.intensity = 10;\n    directionalLight.position.set(5, 5, 10);\n    scene.add(directionalLight);\n\n    // 3Dモデルの読み込み\n    const objLoader = new OBJLoader();\n    objLoader.load('/3Dmodel/shachi.obj', function (obj) {\n      const material = new THREE.MeshStandardMaterial({\n        color: 0xff0000\n      }); // 例: 赤いマテリアル\n      scene.add(obj);\n      // obj.position.x = -50;\n      // obj.position.y = -100;\n    });\n\n    function animate() {\n      requestAnimationFrame(animate);\n      // 立方体を回転させる\n\n      renderer.render(scene, camera); // レンダリング\n    }\n\n    animate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: 'block'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n}\n_s(ThreeDModel, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ThreeDModel;\nexport default ThreeDModel;\nvar _c;\n$RefreshReg$(_c, \"ThreeDModel\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OBJLoader","jsxDEV","_jsxDEV","ThreeDModel","_s","canvasRef","canvas","current","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","z","lookAt","renderer","WebGLRenderer","antialias","directionalLight","DirectionalLight","intensity","set","add","objLoader","load","obj","material","MeshStandardMaterial","color","animate","requestAnimationFrame","render","ref","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/usr/src/app/src/ShachiObject.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\n\nfunction ThreeDModel() {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // シーンの作成\n    const scene = new THREE.Scene();\n\n    // カメラの作成\n    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n    camera.lookAt(0, 0, 0);\n\n    // レンダラの作成\n    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\n\n    // 平行光源を作成\n    const directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.intensity = 10;\n    directionalLight.position.set(5, 5, 10);\n    scene.add(directionalLight);\n\n    // 3Dモデルの読み込み\n    const objLoader = new OBJLoader();\n    objLoader.load('/3Dmodel/shachi.obj', function (obj) {\n      const material = new THREE.MeshStandardMaterial({ color: 0xff0000 }); // 例: 赤いマテリアル\n      scene.add(obj);\n      // obj.position.x = -50;\n      // obj.position.y = -100;\n    });\n\n    function animate() {\n      \n      requestAnimationFrame(animate);\n      // 立方体を回転させる\n\n      renderer.render(scene, camera); // レンダリング\n    }\n\n    animate();\n  }, []);\n\n  return <canvas ref={canvasRef} style={{ display: 'block' }} />;\n}\n\nexport default ThreeDModel;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,SAAS,GAAGP,MAAM,CAA2B,IAAI,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,MAAMS,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;;IAEb;IACA,MAAME,KAAK,GAAG,IAAIT,KAAK,CAACU,KAAK,CAAC,CAAC;;IAE/B;IACA,MAAMC,MAAM,GAAG,IAAIX,KAAK,CAACY,iBAAiB,CAAC,EAAE,EAAEL,MAAM,CAACM,WAAW,GAAGN,MAAM,CAACO,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC;IACnGH,MAAM,CAACI,QAAQ,CAACC,CAAC,GAAG,CAAC;IACrBL,MAAM,CAACM,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEtB;IACA,MAAMC,QAAQ,GAAG,IAAIlB,KAAK,CAACmB,aAAa,CAAC;MAAEZ,MAAM;MAAEa,SAAS,EAAE;IAAK,CAAC,CAAC;;IAErE;IACA,MAAMC,gBAAgB,GAAG,IAAIrB,KAAK,CAACsB,gBAAgB,CAAC,QAAQ,CAAC;IAC7DD,gBAAgB,CAACE,SAAS,GAAG,EAAE;IAC/BF,gBAAgB,CAACN,QAAQ,CAACS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IACvCf,KAAK,CAACgB,GAAG,CAACJ,gBAAgB,CAAC;;IAE3B;IACA,MAAMK,SAAS,GAAG,IAAIzB,SAAS,CAAC,CAAC;IACjCyB,SAAS,CAACC,IAAI,CAAC,qBAAqB,EAAE,UAAUC,GAAG,EAAE;MACnD,MAAMC,QAAQ,GAAG,IAAI7B,KAAK,CAAC8B,oBAAoB,CAAC;QAAEC,KAAK,EAAE;MAAS,CAAC,CAAC,CAAC,CAAC;MACtEtB,KAAK,CAACgB,GAAG,CAACG,GAAG,CAAC;MACd;MACA;IACF,CAAC,CAAC;;IAEF,SAASI,OAAOA,CAAA,EAAG;MAEjBC,qBAAqB,CAACD,OAAO,CAAC;MAC9B;;MAEAd,QAAQ,CAACgB,MAAM,CAACzB,KAAK,EAAEE,MAAM,CAAC,CAAC,CAAC;IAClC;;IAEAqB,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO7B,OAAA;IAAQgC,GAAG,EAAE7B,SAAU;IAAC8B,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChE;AAACpC,EAAA,CA7CQD,WAAW;AAAAsC,EAAA,GAAXtC,WAAW;AA+CpB,eAAeA,WAAW;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/ShachiObject.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThreeDModel() {\n  _s();\n  const canvasRef = useRef(null);\n  const modelRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // シーンの設定\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x4682b4);\n\n    // カメラの設定\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 10;\n    camera.position.y = -1;\n    camera.lookAt(0, 0, 0);\n    const renderer = new THREE.WebGLRenderer({\n      canvas\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    // ライトの設定\n    const directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.intensity = 5;\n    directionalLight.position.set(5, -5, 10);\n    scene.add(directionalLight);\n\n    // モデルの読み込み\n    const objLoader = new GLTFLoader();\n    objLoader.load('shachi.glb', function (obj) {\n      modelRef.current = obj.scene;\n      scene.add(obj.scene);\n      animate();\n    }, undefined, function (error) {\n      console.error(\"モデルの読み込み中にエラーが発生しました:\", error);\n    });\n\n    // アニメーションの設定\n    function animate() {\n      requestAnimationFrame(animate);\n      if (modelRef.current) {\n        modelRef.current.rotation.y += 0.001;\n      }\n      renderer.render(scene, camera);\n    }\n    window.addEventListener('resize', () => {\n      // ウィンドウのリサイズ時にCanvasのサイズを調整\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n    animate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: 'block'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n}\n_s(ThreeDModel, \"SgRS7HvAZyYx1W1Vd1aEfs8lVP8=\");\n_c = ThreeDModel;\nexport default ThreeDModel;\nvar _c;\n$RefreshReg$(_c, \"ThreeDModel\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","GLTFLoader","jsxDEV","_jsxDEV","ThreeDModel","_s","canvasRef","modelRef","canvas","current","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","y","lookAt","renderer","WebGLRenderer","setSize","directionalLight","DirectionalLight","intensity","set","add","objLoader","load","obj","animate","undefined","error","console","requestAnimationFrame","rotation","render","addEventListener","aspect","updateProjectionMatrix","ref","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/usr/src/app/src/ShachiObject.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nfunction ThreeDModel() {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const modelRef = useRef<THREE.Object3D | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // シーンの設定\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0x4682b4 );\n\n    // カメラの設定\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 10;\n    camera.position.y = -1;\n    camera.lookAt(0, 0, 0);\n\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    // ライトの設定\n    const directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.intensity = 5;\n    directionalLight.position.set(5, -5, 10);\n    scene.add(directionalLight);\n\n    // モデルの読み込み\n    const objLoader = new GLTFLoader();\n    objLoader.load('shachi.glb', function (obj) {      \n      modelRef.current = obj.scene;\n      scene.add(obj.scene);\n      animate();\n    },\n    undefined,\n    function (error) {\n      console.error(\"モデルの読み込み中にエラーが発生しました:\", error);\n    });\n\n    // アニメーションの設定\n    function animate() {\n      requestAnimationFrame(animate);\n\n      if (modelRef.current) {\n        modelRef.current.rotation.y += 0.001;\n      }\n\n      renderer.render(scene, camera);\n    }\n\n    window.addEventListener('resize', () => {\n      // ウィンドウのリサイズ時にCanvasのサイズを調整\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n\n    animate();\n  }, []);\n\n  return <canvas ref={canvasRef} style={{ display: 'block' }} />;\n}\n\nexport default ThreeDModel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}